(import [tensorflow :as tf])
(import [numpy :as np])
(setv x_data (.astype (np.random.rand 100) np.float32))
(setv y_data (+ (* x_data 0.1) 0.3))
(setv Weights (tf.Variable (tf.random_uniform [1] -1.0 1.0)))
(setv biases (tf.Variable (tf.zeros [1])))
(setv y (+ (* x_data Weights) biases))
(setv loss (tf.reduce_mean (tf.square (- y y_data))))
(setv optimizer (tf.train.GradientDescentOptimizer 0.5))
(setv train (optimizer.minimize loss))
(setv sess (tf.Session))
(setv init (tf.global_variables_initializer))
(sess.run init)
(for [step (range 201)]
  (do
   (sess.run train)
   (if (= (% step 20) 0)
     (print step (sess.run Weights) (sess.run biases))
     )
   )
)
